---
## https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt

## centos6 has by default some sysctl values not available in containers. fails on first run, works on second???
## 	if not processed first, create errors in following tasks
## FIXME! ansible sysctl module can't unset from sysctl.conf
- block:
    - block:
        - name: harden sysctl config - remove (containers)
#          sysctl: name="{{ item }}" sysctl_set=yes state=absent
          lineinfile: name=/etc/sysctl.conf regexp="^{{ item }}=" state=absent
          with_items: "{{ harden_sysctl_distribution_remove_containers }}"
      when: (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "kvm")) and harden_sysctl_distribution_remove_containers is defined and harden_sysctl_distribution_remove_containers != ''
    - name: harden sysctl config - remove
#      sysctl: name="{{ item }}" sysctl_set=yes state=absent reload=yes
      lineinfile: name=/etc/sysctl.conf regexp="^{{ item }}=" state=absent
      with_items: "{{ harden_sysctl_distribution_remove }}"
  when: harden_sysctl_distribution_remove is defined and harden_sysctl_distribution_remove != ''

- name: harden sysctl config - network
  sysctl: name="{{ item.n }}" value="{{ item.v }}" sysctl_set=yes state=present reload=yes
  with_items: "{{ harden_sysctl_network_settings }}"

- block:
    - debug: var=ansible_virtualization_type
    - name: harden sysctl config - network
      sysctl: name="{{ item.n }}" value="{{ item.v }}" sysctl_set=yes state=present reload=yes
      with_items:
        - { n: 'net.ipv4.tcp_rfc1337', v: 1 }
    - name: get kernel version
      set_fact:
        kernel_r: "{{ ansible_kernel.split('-')[0] }}"
    - debug: var=kernel_r
    ## Note: enterprise distribution impact: Centos6=2.6, Centos7=3.10, Trusty LTS=3.13, Xenial LTS=4.4
    - name: harden sysctl config - network - RFC5961 linux vuln
      sysctl: name="{{ item.n }}" value="{{ item.v }}" sysctl_set=yes state=present reload=yes
      with_items:
        - { n: 'net.ipv4.tcp_challenge_ack_limit', v: 999999999 }
    #  when: "{{ kernel_r | version_compare('3.6', '>=') }}" and "{{ kernel_r | version_compare('4.7', '<') }}"
      when: "{{ kernel_r | version_compare('3.6', '>=') }}"
    - block:
        - debug: var=harden_sysctl_distribution
        - name: harden sysctl config - distribution specific
          sysctl: name="{{ item.n }}" value="{{ item.v }}" sysctl_set=yes state=present reload=yes
          with_items: "{{ harden_sysctl_distribution }}"
      when: harden_sysctl_distribution is defined and harden_sysctl_distribution != "" and harden_sysctl_distribution != 'None' and harden_sysctl_distribution != null
## FIXME! exclude kvm because lxc/digitalocean misidentified - ansible v2.2
##	https://github.com/ansible/ansible/issues/17030
  when: not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker" or ansible_virtualization_type == "kvm"))
#  when: not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker"))


- block:
    - name: disable forwarding in sysctl config
      sysctl: name="{{ item.n }}" value="{{ item.v }}" sysctl_set=yes state=present reload=yes
      with_items:
        - { n: 'net.ipv4.conf.all.forwarding', v: 0 }
  when: not (harden_sysctl_use_forwarding is defined and harden_sysctl_use_forwarding)
- block:
    - name: enable forwarding in sysctl config
      sysctl: name="{{ item.n }}" value="{{ item.v }}" sysctl_set=yes state=present reload=yes
      with_items:
        - { n: 'net.ipv4.conf.all.forwarding', v: 1 }
  when: (harden_sysctl_use_forwarding is defined and harden_sysctl_use_forwarding)

- name: harden sysctl config - ptrace
  sysctl: name="{{ item.n }}" value="{{ item.v }}" sysctl_set=yes state=present reload=yes
  with_items:
    - { n: 'kernel.yama.ptrace_scope', v: 1 }
## FIXME! exclude kvm because lxc/digitalocean misidentified - ansible v2.2
  when: not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker" or ansible_virtualization_type == "kvm")) or ansible_distribution_release == 'xenial'
#  when: not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker")) or ansible_distribution_release == 'xenial'

- name: disable kernel modules loading completely
  sysctl: name="kernel.modules_disabled" value=1 sysctl_set=yes state=present reload=yes
  when: harden_sysctl_kernel_modules_disabled_sysctl is defined and harden_sysctl_kernel_modules_disabled_sysctl

- block:
    - name: disable kernel modules loading now
      sysctl: name="kernel.modules_disabled" value=1 state=present
      when: not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker" or ansible_virtualization_type == "kvm")) or ansible_distribution == 'Ubuntu'
    - name: disable kernel modules loading after initial boot
      blockinfile:
        dest: /etc/rc.local
        block: |
          sleep 60
          {% if hardensysctl_kernel_modules is defined and hardensysctl_kernel_modules != [] %}
          {% for mod in hardensysctl_kernel_modules %}
          insmod {{ mod }}
          {% endfor %}
          {% endif %}
          echo 1 > /proc/sys/kernel/modules_disabled
        marker: "## {mark} ANSIBLE MANAGED BLOCK: kernel modules disabled"
        insertbefore: '^exit 0'
    - name: enabling rc.local with systemd
      service: name=rc-local enabled=yes
      when: ansible_service_mgr == 'systemd'
  when: harden_sysctl_kernel_modules_disabled_afterboot is defined and harden_sysctl_kernel_modules_disabled_afterboot

